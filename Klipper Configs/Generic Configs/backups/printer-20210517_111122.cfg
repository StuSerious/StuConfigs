[mcu]
serial: /dev/serial/by-id/usb-Klipper_lpc1769_1450FF1325813AAF20D66B5CC12000F5-if00

[printer]
kinematics: cartesian
max_velocity: 100
max_accel: 1000
max_z_velocity: 10
max_z_accel: 100

[stepper_x]
step_pin: P2.2
dir_pin: !P2.6
enable_pin: !P2.1
microsteps: 16
rotation_distance: 48
endstop_pin: P1.29
position_endstop: 0
position_max: 270
homing_speed: 20
second_homing_speed: 2
[tmc2208 stepper_x]
uart_pin: P1.10
run_current: 0.8
hold_current: 0.8
stealthchop_threshold: 0

[stepper_y]
step_pin: P0.22
dir_pin: P2.11
enable_pin: !P0.21
microsteps: 16
rotation_distance: 48
endstop_pin: P1.27
position_endstop: 0.0
position_max: 280
homing_speed: 20
second_homing_speed: 2
[tmc2208 stepper_y]
uart_pin: P1.8
run_current: 0.8
hold_current: 0.8
stealthchop_threshold: 0

[stepper_y1]
step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
microsteps: 16
rotation_distance: 48
[tmc2208 stepper_y1]
uart_pin: P1.4
run_current: 0.8
hold_current: 0.8
stealthchop_threshold: 0

[stepper_z]
step_pin: P0.19
dir_pin: P0.20
enable_pin: !P2.8
microsteps: 16
rotation_distance: 3.333
endstop_pin: !P1.28
position_endstop: 0
position_max: 180
homing_speed: 20
second_homing_speed: 1
[tmc2208 stepper_z]
uart_pin: P1.9
run_current: 1.0
hold_current: 1.0
stealthchop_threshold: 0

[heater_bed]
heater_pin: P2.5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: P0.25
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[pause_resume]

[display_status]

[virtual_sdcard]
path: ~/gcode_files

[temperature_sensor Pi]
sensor_type: temperature_host
#sensor_path:
#   The path to temperature system file. The default is
#   "/sys/class/thermal/thermal_zone0/temp" which is the temperature
#   system file on a Raspberry Pi computer.

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 E-{E} F2100
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### end of definitions #####
  G91
  G1 E{E} F2100
  RESTORE_GCODE_STATE NAME=PAUSE_state
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT